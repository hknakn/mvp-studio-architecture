"use strict";(self.webpackChunkmvp_studio_architecture=self.webpackChunkmvp_studio_architecture||[]).push([[596],{2269:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>l,contentTitle:()=>r,default:()=>u,frontMatter:()=>o,metadata:()=>d,toc:()=>c});var t=s(4848),i=s(8453);const o={sidebar_position:8},r="CI/CD",d={id:"ci-cd",title:"CI/CD",description:"Our boilerplate includes a Continuous Integration and Continuous Deployment (CI/CD) setup using GitHub Actions. This ensures that your code is automatically tested, built, and deployed whenever changes are pushed to your repository.",source:"@site/docs/ci-cd.md",sourceDirName:".",slug:"/ci-cd",permalink:"/mvp-studio-architecture/docs/ci-cd",draft:!1,unlisted:!1,editUrl:"https://github.com/your-org/mvp-studio-architecture/edit/master/docs/docs/ci-cd.md",tags:[],version:"current",sidebarPosition:8,frontMatter:{sidebar_position:8},sidebar:"docs",previous:{title:"Testing",permalink:"/mvp-studio-architecture/docs/testing"},next:{title:"Error Tracking",permalink:"/mvp-studio-architecture/docs/error-tracking"}},l={},c=[{value:"GitHub Actions Workflow",id:"github-actions-workflow",level:2},{value:"Environment Variables",id:"environment-variables",level:2},{value:"Customizing the CI/CD Pipeline",id:"customizing-the-cicd-pipeline",level:2}];function a(e){const n={code:"code",h1:"h1",h2:"h2",header:"header",li:"li",mermaid:"mermaid",ol:"ol",p:"p",pre:"pre",strong:"strong",...(0,i.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"cicd",children:"CI/CD"})}),"\n",(0,t.jsxs)(n.p,{children:["Our boilerplate includes a ",(0,t.jsx)(n.strong,{children:"Continuous Integration and Continuous Deployment (CI/CD)"})," setup using ",(0,t.jsx)(n.strong,{children:"GitHub Actions"}),". This ensures that your code is automatically tested, built, and deployed whenever changes are pushed to your repository."]}),"\n",(0,t.jsx)(n.mermaid,{value:"graph TD\nA[Push to Repository] --\x3e B[GitHub Actions Triggered]\nB --\x3e C[Run Tests]\nC --\x3e D{Tests Pass?}\nD --\x3e|Yes| E[Build App]\nD --\x3e|No| F[Notify Developer]\nE --\x3e G[Deploy to TestFlight/Play Store Beta]\nG --\x3e H[Automated UI Tests]\nH --\x3e I{Tests Pass?}\nI --\x3e|Yes| J[Deploy to Production]\nI --\x3e|No| F"}),"\n",(0,t.jsx)(n.h2,{id:"github-actions-workflow",children:"GitHub Actions Workflow"}),"\n",(0,t.jsxs)(n.p,{children:["The CI/CD pipeline is defined in ",(0,t.jsx)(n.code,{children:".github/workflows/ci-cd.yml"}),":"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-yaml",children:'name: CI/CD\n\non:\n  push:\n    branches: [main]\n  pull_request:\n    branches: [main]\n\njobs:\n  test:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v2\n      - name: Use Node.js\n        uses: actions/setup-node@v2\n        with:\n          node-version: "14.x"\n      - run: npm ci\n      - run: npm run test\n\n  lint:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v2\n      - name: Use Node.js\n        uses: actions/setup-node@v2\n        with:\n          node-version: "14.x"\n      - run: npm ci\n      - run: npm run lint\n\n  build-android:\n    needs: [test, lint]\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v2\n      - name: Set up JDK 11\n        uses: actions/setup-java@v2\n        with:\n          java-version: "11"\n          distribution: "adopt"\n      - name: Build Android Release\n        run: |\n          cd android\n          ./gradlew assembleRelease\n\n  build-ios:\n    needs: [test, lint]\n    runs-on: macos-latest\n    steps:\n      - uses: actions/checkout@v2\n      - name: Use Node.js\n        uses: actions/setup-node@v2\n        with:\n          node-version: "14.x"\n      - name: Build iOS Release\n        run: |\n          cd ios\n          pod install\n          xcodebuild -workspace MyApp.xcworkspace -scheme MyApp archive -archivePath MyApp.xcarchive -allowProvisioningUpdates\n\n  deploy:\n    needs: [build-android, build-ios]\n    runs-on: ubuntu-latest\n    steps:\n      - name: Deploy to App Store\n        run: echo "Deploy to App Store"\n      - name: Deploy to Google Play\n        run: echo "Deploy to Google Play"\n'})}),"\n",(0,t.jsx)(n.p,{children:"This workflow does the following:"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsx)(n.li,{children:"Runs tests and linting on every push and pull request."}),"\n",(0,t.jsx)(n.li,{children:"If tests and linting pass, it builds both Android and iOS versions of the app."}),"\n",(0,t.jsx)(n.li,{children:"If both builds are successful, it deploys the app to the App Store and Google Play (you would need to add the specific deployment steps)."}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"environment-variables",children:"Environment Variables"}),"\n",(0,t.jsx)(n.p,{children:"Sensitive information like API keys should be stored as GitHub Secrets and accessed in the workflow as environment variables:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-yaml",children:"steps:\n  - name: Build Android Release\n    env:\n      ANDROID_KEYSTORE_PASSWORD: ${{ secrets.ANDROID_KEYSTORE_PASSWORD }}\n    run: ./gradlew assembleRelease\n"})}),"\n",(0,t.jsx)(n.h2,{id:"customizing-the-cicd-pipeline",children:"Customizing the CI/CD Pipeline"}),"\n",(0,t.jsx)(n.p,{children:"To customize the CI/CD pipeline:"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:["Modify the ",(0,t.jsx)(n.code,{children:".github/workflows/ci-cd.yml"})," file."]}),"\n",(0,t.jsx)(n.li,{children:"Add or remove jobs as needed."}),"\n",(0,t.jsxs)(n.li,{children:["Adjust the triggers in the ",(0,t.jsx)(n.code,{children:"on"})," section to run the workflow on different events."]}),"\n"]})]})}function u(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(a,{...e})}):a(e)}},8453:(e,n,s)=>{s.d(n,{R:()=>r,x:()=>d});var t=s(6540);const i={},o=t.createContext(i);function r(e){const n=t.useContext(o);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function d(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:r(e.components),t.createElement(o.Provider,{value:n},e.children)}}}]);