"use strict";(self.webpackChunkmvp_studio_architecture=self.webpackChunkmvp_studio_architecture||[]).push([[3751],{8071:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>a,contentTitle:()=>r,default:()=>h,frontMatter:()=>o,metadata:()=>l,toc:()=>c});var s=n(4848),i=n(8453);const o={sidebar_position:4},r="Styling",l={id:"styling",title:"Styling",description:"Our boilerplate uses React Native Unistyles for styling, which provides a powerful and flexible way to style your components while maintaining type safety and enabling easy theming.",source:"@site/docs/styling.md",sourceDirName:".",slug:"/styling",permalink:"/mvp-studio-architecture/docs/styling",draft:!1,unlisted:!1,editUrl:"https://github.com/your-org/mvp-studio-architecture/edit/master/docs/docs/styling.md",tags:[],version:"current",sidebarPosition:4,frontMatter:{sidebar_position:4},sidebar:"docs",previous:{title:"Theming",permalink:"/mvp-studio-architecture/docs/theming"},next:{title:"Authentication",permalink:"/mvp-studio-architecture/docs/authentication"}},a={},c=[{value:"Basic Usage",id:"basic-usage",level:2},{value:"Responsive Styles",id:"responsive-styles",level:2},{value:"Dynamic Styles",id:"dynamic-styles",level:2},{value:"Extending Styles",id:"extending-styles",level:2},{value:"Best Practices",id:"best-practices",level:2}];function d(e){const t={code:"code",h1:"h1",h2:"h2",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",...(0,i.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(t.header,{children:(0,s.jsx)(t.h1,{id:"styling",children:"Styling"})}),"\n",(0,s.jsx)(t.p,{children:"Our boilerplate uses React Native Unistyles for styling, which provides a powerful and flexible way to style your components while maintaining type safety and enabling easy theming."}),"\n",(0,s.jsx)(t.h2,{id:"basic-usage",children:"Basic Usage"}),"\n",(0,s.jsx)(t.p,{children:"To create styles for a component:"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-typescript",children:'import { createStyleSheet, useStyles } from "react-native-unistyles";\n\nconst useStyles = createStyleSheet((theme) => ({\n  container: {\n    flex: 1,\n    backgroundColor: theme.colors.background,\n    padding: theme.spacing.md,\n  },\n  text: {\n    color: theme.colors.text,\n    fontSize: theme.typography.fontSize.medium,\n    fontWeight: theme.typography.fontWeight.regular,\n  },\n}));\n\nfunction MyComponent() {\n  const { styles } = useStyles();\n\n  return (\n    <View style={styles.container}>\n      <Text style={styles.text}>Hello, World!</Text>\n    </View>\n  );\n}\n'})}),"\n",(0,s.jsx)(t.h2,{id:"responsive-styles",children:"Responsive Styles"}),"\n",(0,s.jsx)(t.p,{children:"Unistyles provides a way to create responsive styles based on the device's screen size:"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-typescript",children:'import { createStyleSheet, useStyles } from "react-native-unistyles";\n\nconst useStyles = createStyleSheet((theme) => ({\n  container: {\n    flex: 1,\n    padding: {\n      xs: theme.spacing.sm,\n      md: theme.spacing.md,\n      lg: theme.spacing.lg,\n    },\n  },\n  text: {\n    fontSize: {\n      xs: theme.typography.fontSize.small,\n      md: theme.typography.fontSize.medium,\n      lg: theme.typography.fontSize.large,\n    },\n  },\n}));\n'})}),"\n",(0,s.jsx)(t.h2,{id:"dynamic-styles",children:"Dynamic Styles"}),"\n",(0,s.jsx)(t.p,{children:"You can create dynamic styles based on props or state:"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-typescript",children:"const useStyles = createStyleSheet((theme) => ({\n  button: (isActive: boolean) => ({\n    backgroundColor: isActive ? theme.colors.primary : theme.colors.secondary,\n    padding: theme.spacing.md,\n    borderRadius: theme.borderRadius.medium,\n  }),\n}));\n\nfunction MyButton({ isActive, onPress, title }) {\n  const { styles } = useStyles();\n\n  return (\n    <TouchableOpacity style={styles.button(isActive)} onPress={onPress}>\n      <Text>{title}</Text>\n    </TouchableOpacity>\n  );\n}\n"})}),"\n",(0,s.jsx)(t.h2,{id:"extending-styles",children:"Extending Styles"}),"\n",(0,s.jsx)(t.p,{children:"You can extend existing styles to create new variations:"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-typescript",children:"const baseStyles = createStyleSheet((theme) => ({\n  text: {\n    fontSize: theme.typography.fontSize.medium,\n    color: theme.colors.text,\n  },\n}));\n\nconst extendedStyles = createStyleSheet((theme) => ({\n  highlightedText: {\n    ...baseStyles.text,\n    fontWeight: theme.typography.fontWeight.bold,\n    color: theme.colors.primary,\n  },\n}));\n"})}),"\n",(0,s.jsx)(t.h2,{id:"best-practices",children:"Best Practices"}),"\n",(0,s.jsxs)(t.ol,{children:["\n",(0,s.jsx)(t.li,{children:"Use the theme values for colors, spacing, and typography to provide consistency."}),"\n",(0,s.jsx)(t.li,{children:"Create reusable style objects for common patterns in your app."}),"\n",(0,s.jsx)(t.li,{children:"Keep your style definitions close to the components that use them for better organization."}),"\n",(0,s.jsx)(t.li,{children:"Use dynamic styles for interactive elements that change appearance based on state."}),"\n"]})]})}function h(e={}){const{wrapper:t}={...(0,i.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},8453:(e,t,n)=>{n.d(t,{R:()=>r,x:()=>l});var s=n(6540);const i={},o=s.createContext(i);function r(e){const t=s.useContext(o);return s.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function l(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:r(e.components),s.createElement(o.Provider,{value:t},e.children)}}}]);