"use strict";(self.webpackChunkmvp_studio_architecture=self.webpackChunkmvp_studio_architecture||[]).push([[9307],{9637:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>s,default:()=>u,frontMatter:()=>r,metadata:()=>o,toc:()=>d});var a=t(4848),i=t(8453);const r={},s="Reanimated",o={id:"reanimated",title:"Reanimated",description:"React Native Reanimated is a powerful animation library that allows for creating smooth, high-performance animations in React Native applications. This document outlines how Reanimated is integrated and used in the MVP Studio Boilerplate.",source:"@site/docs/reanimated.md",sourceDirName:".",slug:"/reanimated",permalink:"/mvp-studio-architecture/docs/reanimated",draft:!1,unlisted:!1,editUrl:"https://github.com/your-org/mvp-studio-architecture/edit/master/docs/docs/reanimated.md",tags:[],version:"current",frontMatter:{},sidebar:"docs",previous:{title:"React Native MMKV",permalink:"/mvp-studio-architecture/docs/MMKV"},next:{title:"React Native Skottie",permalink:"/mvp-studio-architecture/docs/skottie"}},l={},d=[{value:"Comparison with Animated API",id:"comparison-with-animated-api",level:2},{value:"Usage in MVP Studio Boilerplate",id:"usage-in-mvp-studio-boilerplate",level:2},{value:"Basic Animation",id:"basic-animation",level:3},{value:"Gesture-based Animation",id:"gesture-based-animation",level:3}];function c(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",p:"p",pre:"pre",...(0,i.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.header,{children:(0,a.jsx)(n.h1,{id:"reanimated",children:"Reanimated"})}),"\n",(0,a.jsx)(n.p,{children:"React Native Reanimated is a powerful animation library that allows for creating smooth, high-performance animations in React Native applications. This document outlines how Reanimated is integrated and used in the MVP Studio Boilerplate."}),"\n",(0,a.jsx)(n.h2,{id:"comparison-with-animated-api",children:"Comparison with Animated API"}),"\n",(0,a.jsx)(n.p,{children:"Reanimated provides a more flexible and performant way to create animations compared to the core Animated API. It runs animations on the native thread, resulting in smoother performance, especially for complex animations."}),"\n",(0,a.jsx)(n.h2,{id:"usage-in-mvp-studio-boilerplate",children:"Usage in MVP Studio Boilerplate"}),"\n",(0,a.jsx)(n.h3,{id:"basic-animation",children:"Basic Animation"}),"\n",(0,a.jsx)(n.p,{children:"Here's an example of a simple fade-in animation using Reanimated:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-typescript",children:'import Animated, {\n  useAnimatedStyle,\n  useSharedValue,\n  withTiming,\n} from "react-native-reanimated";\n\nconst FadeInView = ({ children }) => {\n  const opacity = useSharedValue(0);\n\n  React.useEffect(() => {\n    opacity.value = withTiming(1, { duration: 1000 });\n  }, []);\n\n  const animatedStyle = useAnimatedStyle(() => {\n    return {\n      opacity: opacity.value,\n    };\n  });\n\n  return <Animated.View style={animatedStyle}>{children}</Animated.View>;\n};\n'})}),"\n",(0,a.jsx)(n.h3,{id:"gesture-based-animation",children:"Gesture-based Animation"}),"\n",(0,a.jsx)(n.p,{children:"Here's an example of a draggable component:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-typescript",children:'import { PanGestureHandler } from "react-native-gesture-handler";\nimport Animated, {\n  useAnimatedGestureHandler,\n  useAnimatedStyle,\n  useSharedValue,\n  withSpring,\n} from "react-native-reanimated";\n\nconst DraggableBox = () => {\n  const translateX = useSharedValue(0);\n  const translateY = useSharedValue(0);\n\n  const panGestureEvent = useAnimatedGestureHandler({\n    onStart: (_, context) => {\n      context.translateX = translateX.value;\n      context.translateY = translateY.value;\n    },\n    onActive: (event, context) => {\n      translateX.value = context.translateX + event.translationX;\n      translateY.value = context.translateY + event.translationY;\n    },\n    onEnd: () => {\n      translateX.value = withSpring(0);\n      translateY.value = withSpring(0);\n    },\n  });\n\n  const rStyle = useAnimatedStyle(() => {\n    return {\n      transform: [\n        { translateX: translateX.value },\n        { translateY: translateY.value },\n      ],\n    };\n  });\n\n  return (\n    <PanGestureHandler onGestureEvent={panGestureEvent}>\n      <Animated.View style={[styles.box, rStyle]} />\n    </PanGestureHandler>\n  );\n};\n'})})]})}function u(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(c,{...e})}):c(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>s,x:()=>o});var a=t(6540);const i={},r=a.createContext(i);function s(e){const n=a.useContext(r);return a.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:s(e.components),a.createElement(r.Provider,{value:n},e.children)}}}]);