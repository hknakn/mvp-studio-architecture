"use strict";(self.webpackChunkmvp_studio_architecture=self.webpackChunkmvp_studio_architecture||[]).push([[2346],{4369:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>c,contentTitle:()=>a,default:()=>p,frontMatter:()=>o,metadata:()=>i,toc:()=>d});var n=r(4848),s=r(8453);const o={sidebar_position:14},a="React Native MMKV",i={id:"MMKV",title:"React Native MMKV",description:"Our boilerplate uses React Native MMKV for efficient local data storage. MMKV provides a significant performance boost over AsyncStorage, making it ideal for storing app settings, user preferences, and other local data.",source:"@site/docs/MMKV.md",sourceDirName:".",slug:"/MMKV",permalink:"/mvp-studio-architecture/docs/MMKV",draft:!1,unlisted:!1,editUrl:"https://github.com/your-org/mvp-studio-architecture/edit/master/docs/docs/MMKV.md",tags:[],version:"current",sidebarPosition:14,frontMatter:{sidebar_position:14},sidebar:"docs",previous:{title:"Security",permalink:"/mvp-studio-architecture/docs/security"},next:{title:"Reanimated",permalink:"/mvp-studio-architecture/docs/reanimated"}},c={},d=[{value:"Using MMKV Storage",id:"using-mmkv-storage",level:2},{value:"Typed Storage Hooks",id:"typed-storage-hooks",level:2}];function u(e){const t={code:"code",h1:"h1",h2:"h2",header:"header",p:"p",pre:"pre",...(0,s.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(t.header,{children:(0,n.jsx)(t.h1,{id:"react-native-mmkv",children:"React Native MMKV"})}),"\n",(0,n.jsx)(t.p,{children:"Our boilerplate uses React Native MMKV for efficient local data storage. MMKV provides a significant performance boost over AsyncStorage, making it ideal for storing app settings, user preferences, and other local data."}),"\n",(0,n.jsx)(t.h2,{id:"using-mmkv-storage",children:"Using MMKV Storage"}),"\n",(0,n.jsxs)(t.p,{children:["We've created a ",(0,n.jsx)(t.code,{children:"StorageService"})," that wraps MMKV functionality:"]}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-typescript",children:'import { StorageService } from "@/services/StorageService";\n\n// Store a value\nStorageService.set("user_id", "12345");\n\n// Retrieve a value\nconst userId = StorageService.get("user_id");\n\n// Store an object\nStorageService.setObject("user_preferences", {\n  theme: "dark",\n  notifications: true,\n});\n\n// Retrieve an object\nconst preferences = StorageService.getObject("user_preferences");\n\n// Remove a value\nStorageService.remove("user_id");\n'})}),"\n",(0,n.jsx)(t.h2,{id:"typed-storage-hooks",children:"Typed Storage Hooks"}),"\n",(0,n.jsx)(t.p,{children:"For even better type safety and ease of use, we've created typed storage hooks:"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-typescript",children:'import { createTypedStorageHooks } from "@/utils/storage";\n\ninterface UserPreferences {\n  theme: "light" | "dark";\n  notifications: boolean;\n}\n\nconst { useStorageItem, useStorageObject } = createTypedStorageHooks<{\n  userId: string;\n  preferences: UserPreferences;\n}>();\n\nfunction MyComponent() {\n  const [userId, setUserId] = useStorageItem("userId");\n  const [preferences, setPreferences] = useStorageObject("preferences");\n\n  // Use userId and preferences in your component\n  // setUserId and setPreferences will automatically update storage\n}\n'})})]})}function p(e={}){const{wrapper:t}={...(0,s.R)(),...e.components};return t?(0,n.jsx)(t,{...e,children:(0,n.jsx)(u,{...e})}):u(e)}},8453:(e,t,r)=>{r.d(t,{R:()=>a,x:()=>i});var n=r(6540);const s={},o=n.createContext(s);function a(e){const t=n.useContext(o);return n.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function i(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:a(e.components),n.createElement(o.Provider,{value:t},e.children)}}}]);