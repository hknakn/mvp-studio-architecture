"use strict";(self.webpackChunkmvp_studio_architecture=self.webpackChunkmvp_studio_architecture||[]).push([[8608],{9955:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>a,default:()=>u,frontMatter:()=>i,metadata:()=>o,toc:()=>d});var r=t(4848),s=t(8453);const i={sidebar_position:3},a="Data Handling",o={id:"data-handling",title:"Data Handling",description:"Our boilerplate uses a combination of RTK Query for API calls and data caching, and Redux Persist for local data persistence. The data flow in the MVP Studio Boilerplate, powered by RTK Query, looks like this:",source:"@site/docs/data-handling.md",sourceDirName:".",slug:"/data-handling",permalink:"/mvp-studio-architecture/docs/data-handling",draft:!1,unlisted:!1,editUrl:"https://github.com/your-org/mvp-studio-architecture/edit/master/docs/docs/data-handling.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3},sidebar:"docs",previous:{title:"State Management",permalink:"/mvp-studio-architecture/docs/state-management"},next:{title:"Elements",permalink:"/mvp-studio-architecture/docs/elements"}},c={},d=[{value:"RTK Query Setup",id:"rtk-query-setup",level:2},{value:"Defining API Endpoints",id:"defining-api-endpoints",level:2},{value:"Using RTK Query in Components",id:"using-rtk-query-in-components",level:2},{value:"Data Persistence",id:"data-persistence",level:2},{value:"Offline Support",id:"offline-support",level:2},{value:"Data Transformation",id:"data-transformation",level:2},{value:"Best Practices",id:"best-practices",level:2}];function l(e){const n={code:"code",h1:"h1",h2:"h2",header:"header",li:"li",mermaid:"mermaid",ol:"ol",p:"p",pre:"pre",strong:"strong",...(0,s.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"data-handling",children:"Data Handling"})}),"\n",(0,r.jsxs)(n.p,{children:["Our boilerplate uses a combination of ",(0,r.jsx)(n.strong,{children:"RTK Query"})," for API calls and data caching, and ",(0,r.jsx)(n.strong,{children:"Redux Persist"})," for local data persistence. The data flow in the MVP Studio Boilerplate, powered by ",(0,r.jsx)(n.strong,{children:"RTK Query"}),", looks like this:"]}),"\n",(0,r.jsx)(n.mermaid,{value:"graph TD\n    A[Component] --\x3e B[RTK Query Hook]\n    B --\x3e C[Cache Check]\n    C --\x3e|Cache Hit| D[Return Cached Data]\n    C --\x3e|Cache Miss| E[API Call]\n    E --\x3e F[Update Cache]\n    F --\x3e G[Return Fresh Data]\n    D --\x3e H[Component Update]\n    G --\x3e H"}),"\n",(0,r.jsx)(n.h2,{id:"rtk-query-setup",children:"RTK Query Setup"}),"\n",(0,r.jsxs)(n.p,{children:["RTK Query is pre-configured in ",(0,r.jsx)(n.code,{children:"src/services/api.ts"}),":"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:'import { createApi, fetchBaseQuery } from "@reduxjs/toolkit/query/react";\nimport { RootState } from "@/store";\n\nexport const api = createApi({\n  baseQuery: fetchBaseQuery({\n    baseUrl: "https://api.example.com",\n    prepareHeaders: (headers, { getState }) => {\n      const token = (getState() as RootState).auth.token;\n      if (token) {\n        headers.set("authorization", `Bearer ${token}`);\n      }\n      return headers;\n    },\n  }),\n  endpoints: (builder) => ({\n    // Define your endpoints here\n  }),\n});\n'})}),"\n",(0,r.jsx)(n.h2,{id:"defining-api-endpoints",children:"Defining API Endpoints"}),"\n",(0,r.jsx)(n.p,{children:"To add a new API endpoint:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:'export const api = createApi({\n  // ... base configuration\n  endpoints: (builder) => ({\n    getUsers: builder.query<User[], void>({\n      query: () => "users",\n    }),\n    getUserById: builder.query<User, string>({\n      query: (id) => `users/${id}`,\n    }),\n    createUser: builder.mutation<User, Partial<User>>({\n      query: (newUser) => ({\n        url: "users",\n        method: "POST",\n        body: newUser,\n      }),\n    }),\n  }),\n});\n\nexport const { useGetUsersQuery, useGetUserByIdQuery, useCreateUserMutation } =\n  api;\n'})}),"\n",(0,r.jsx)(n.h2,{id:"using-rtk-query-in-components",children:"Using RTK Query in Components"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:'import { useGetUsersQuery, useCreateUserMutation } from "@/services/api";\n\nfunction UserList() {\n  const { data: users, isLoading, error } = useGetUsersQuery();\n  const [createUser] = useCreateUserMutation();\n\n  if (isLoading) return <Loading />;\n  if (error) return <Error />;\n\n  return (\n    <View>\n      {users.map((user) => (\n        <UserItem key={user.id} user={user} />\n      ))}\n      <Button\n        title="Add User"\n        onPress={() => createUser({ name: "New User" })}\n      />\n    </View>\n  );\n}\n'})}),"\n",(0,r.jsx)(n.h2,{id:"data-persistence",children:"Data Persistence"}),"\n",(0,r.jsxs)(n.p,{children:["Redux Persist is used for local data persistence. It's configured in ",(0,r.jsx)(n.code,{children:"src/store/index.ts"}),":"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:'import { persistStore, persistReducer } from "redux-persist";\nimport AsyncStorage from "@react-native-async-storage/async-storage";\n\nconst persistConfig = {\n  key: "root",\n  storage: AsyncStorage,\n  whitelist: ["auth", "user"], // Only persist these reducers\n};\n\nconst persistedReducer = persistReducer(persistConfig, rootReducer);\n'})}),"\n",(0,r.jsx)(n.h2,{id:"offline-support",children:"Offline Support"}),"\n",(0,r.jsx)(n.p,{children:"For offline support, we use a combination of Redux Persist and custom middleware:"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsx)(n.li,{children:"Store API responses in Redux state."}),"\n",(0,r.jsx)(n.li,{children:"Use Redux Persist to save this state to AsyncStorage."}),"\n",(0,r.jsx)(n.li,{children:"Implement custom middleware to queue actions when offline:"}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"const offlineMiddleware =\n  ({ dispatch, getState }) =>\n  (next) =>\n  (action) => {\n    if (!navigator.onLine) {\n      return dispatch(addToOfflineQueue(action));\n    }\n    return next(action);\n  };\n"})}),"\n",(0,r.jsxs)(n.ol,{start:"4",children:["\n",(0,r.jsx)(n.li,{children:"Process the queue when coming back online."}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"data-transformation",children:"Data Transformation"}),"\n",(0,r.jsxs)(n.p,{children:["For complex data transformations, we use the ",(0,r.jsx)(n.code,{children:"reselect"})," library:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:'import { createSelector } from "reselect";\n\nconst selectUsers = (state) => state.users;\nconst selectProjects = (state) => state.projects;\n\nexport const selectUserProjects = createSelector(\n  [selectUsers, selectProjects],\n  (users, projects) => {\n    // Perform complex data transformation here\n  }\n);\n'})}),"\n",(0,r.jsx)(n.h2,{id:"best-practices",children:"Best Practices"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsx)(n.li,{children:"Use RTK Query for all API calls to benefit from automatic caching and refetching."}),"\n",(0,r.jsx)(n.li,{children:"Implement proper error handling and loading states in your components."}),"\n",(0,r.jsx)(n.li,{children:"Use selectors for derived state to improve performance."}),"\n",(0,r.jsx)(n.li,{children:"Be mindful of what data you persist locally and ensure sensitive data is properly secured."}),"\n",(0,r.jsx)(n.li,{children:"Implement proper data validation both on the client and server side."}),"\n"]})]})}function u(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(l,{...e})}):l(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>a,x:()=>o});var r=t(6540);const s={},i=r.createContext(s);function a(e){const n=r.useContext(i);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:a(e.components),r.createElement(i.Provider,{value:n},e.children)}}}]);