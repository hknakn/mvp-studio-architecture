"use strict";(self.webpackChunkmvp_studio_architecture=self.webpackChunkmvp_studio_architecture||[]).push([[821],{3085:(e,t,i)=>{i.r(t),i.d(t,{assets:()=>r,contentTitle:()=>o,default:()=>u,frontMatter:()=>a,metadata:()=>s,toc:()=>p});var c=i(4848),n=i(8453);const a={},o="Haptics",s={id:"haptics",title:"Haptics",description:"Expo Haptics provides haptic feedback for iOS and Android devices. It allows you to add haptic feedback to app to improve the user experience.",source:"@site/docs/haptics.md",sourceDirName:".",slug:"/haptics",permalink:"/mvp-studio-architecture/docs/haptics",draft:!1,unlisted:!1,editUrl:"https://github.com/your-org/mvp-studio-architecture/edit/master/docs/docs/haptics.md",tags:[],version:"current",frontMatter:{},sidebar:"docs",previous:{title:"React Native SVG",permalink:"/mvp-studio-architecture/docs/react-native-svg"}},r={},p=[{value:"Usage in MVP Studio Boilerplate",id:"usage-in-mvp-studio-boilerplate",level:2},{value:"Basic Haptic Feedback",id:"basic-haptic-feedback",level:3}];function d(e){const t={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",p:"p",pre:"pre",...(0,n.R)(),...e.components};return(0,c.jsxs)(c.Fragment,{children:[(0,c.jsx)(t.header,{children:(0,c.jsx)(t.h1,{id:"haptics",children:"Haptics"})}),"\n",(0,c.jsx)(t.p,{children:"Expo Haptics provides haptic feedback for iOS and Android devices. It allows you to add haptic feedback to app to improve the user experience."}),"\n",(0,c.jsx)(t.h2,{id:"usage-in-mvp-studio-boilerplate",children:"Usage in MVP Studio Boilerplate"}),"\n",(0,c.jsx)(t.h3,{id:"basic-haptic-feedback",children:"Basic Haptic Feedback"}),"\n",(0,c.jsx)(t.p,{children:"Here's an example of using different types of haptic feedback:"}),"\n",(0,c.jsx)(t.pre,{children:(0,c.jsx)(t.code,{className:"language-typescript",children:'import React from "react";\nimport { View, Button } from "react-native";\nimport * as Haptics from "expo-haptics";\n\nconst HapticExample = () => {\n  const triggerSelection = () => {\n    Haptics.selectionAsync();\n  };\n\n  const triggerImpact = () => {\n    Haptics.impactAsync(Haptics.ImpactFeedbackStyle.Medium);\n  };\n\n  const triggerNotification = () => {\n    Haptics.notificationAsync(Haptics.NotificationFeedbackType.Success);\n  };\n\n  return (\n    <View>\n      <Button title="Selection" onPress={triggerSelection} />\n      <Button title="Impact" onPress={triggerImpact} />\n      <Button title="Notification" onPress={triggerNotification} />\n    </View>\n  );\n};\n'})})]})}function u(e={}){const{wrapper:t}={...(0,n.R)(),...e.components};return t?(0,c.jsx)(t,{...e,children:(0,c.jsx)(d,{...e})}):d(e)}},8453:(e,t,i)=>{i.d(t,{R:()=>o,x:()=>s});var c=i(6540);const n={},a=c.createContext(n);function o(e){const t=c.useContext(a);return c.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function s(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(n):e.components||n:o(e.components),c.createElement(a.Provider,{value:t},e.children)}}}]);