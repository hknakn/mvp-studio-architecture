"use strict";(self.webpackChunkmvp_studio_architecture=self.webpackChunkmvp_studio_architecture||[]).push([[5087],{8591:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>i,default:()=>a,frontMatter:()=>r,metadata:()=>c,toc:()=>h});var o=t(4848),s=t(8453);const r={sidebar_position:3},i="Theming",c={id:"theming",title:"Theming",description:"Our boilerplate uses a robust theming system to ensure consistent visual design across the app while allowing for easy customization and the implementation of features like ligth / dark mode support.",source:"@site/docs/theming.md",sourceDirName:".",slug:"/theming",permalink:"/mvp-studio-architecture/docs/theming",draft:!1,unlisted:!1,editUrl:"https://github.com/your-org/mvp-studio-architecture/edit/master/docs/docs/theming.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3},sidebar:"docs",previous:{title:"Screens",permalink:"/mvp-studio-architecture/docs/screens"},next:{title:"Styling",permalink:"/mvp-studio-architecture/docs/styling"}},l={},h=[{value:"Theme Structure",id:"theme-structure",level:2},{value:"Using the Theme",id:"using-the-theme",level:2},{value:"Dark Mode",id:"dark-mode",level:2},{value:"Customizing the Theme",id:"customizing-the-theme",level:2}];function d(e){const n={code:"code",h1:"h1",h2:"h2",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",ul:"ul",...(0,s.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.header,{children:(0,o.jsx)(n.h1,{id:"theming",children:"Theming"})}),"\n",(0,o.jsx)(n.p,{children:"Our boilerplate uses a robust theming system to ensure consistent visual design across the app while allowing for easy customization and the implementation of features like ligth / dark mode support."}),"\n",(0,o.jsx)(n.h2,{id:"theme-structure",children:"Theme Structure"}),"\n",(0,o.jsxs)(n.p,{children:["The theme is defined in ",(0,o.jsx)(n.code,{children:"src/styles/theme.ts"})," and includes properties such as:"]}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:"Colors"}),"\n",(0,o.jsx)(n.li,{children:"Typography"}),"\n",(0,o.jsx)(n.li,{children:"Spacing"}),"\n",(0,o.jsx)(n.li,{children:"Border radius"}),"\n",(0,o.jsx)(n.li,{children:"Shadows"}),"\n"]}),"\n",(0,o.jsx)(n.p,{children:"Here's an example of our theme structure:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-typescript",children:'import { createTheme } from "react-native-unistyles";\n\nexport const theme = createTheme({\n  colors: {\n    primary: "#007AFF",\n    secondary: "#5856D6",\n    background: "#FFFFFF",\n    text: "#000000",\n    // ... other colors\n  },\n  typography: {\n    fontFamily: "System",\n    fontSize: {\n      small: 12,\n      medium: 16,\n      large: 20,\n      // ... other sizes\n    },\n    fontWeight: {\n      regular: "400",\n      bold: "700",\n      // ... other weights\n    },\n  },\n  spacing: {\n    xs: 4,\n    sm: 8,\n    md: 16,\n    lg: 24,\n    xl: 32,\n  },\n  borderRadius: {\n    small: 4,\n    medium: 8,\n    large: 16,\n  },\n  shadows: {\n    small: {\n      shadowColor: "#000",\n      shadowOffset: { width: 0, height: 2 },\n      shadowOpacity: 0.1,\n      shadowRadius: 2,\n      elevation: 2,\n    },\n    // ... other shadow definitions\n  },\n});\n'})}),"\n",(0,o.jsx)(n.h2,{id:"using-the-theme",children:"Using the Theme"}),"\n",(0,o.jsxs)(n.p,{children:["You can access the theme in your components using the ",(0,o.jsx)(n.code,{children:"useStyles"})," hook:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-typescript",children:'import { useStyles } from "react-native-unistyles";\n\nfunction MyComponent() {\n  const { theme } = useStyles();\n\n  return (\n    <View style={{ backgroundColor: theme.colors.background }}>\n      <Text\n        style={{\n          color: theme.colors.text,\n          fontSize: theme.typography.fontSize.medium,\n        }}\n      >\n        Hello, World!\n      </Text>\n    </View>\n  );\n}\n'})}),"\n",(0,o.jsx)(n.h2,{id:"dark-mode",children:"Dark Mode"}),"\n",(0,o.jsx)(n.p,{children:"Our theming system supports dark mode out of the box. To implement dark mode:"}),"\n",(0,o.jsxs)(n.ol,{children:["\n",(0,o.jsx)(n.li,{children:"Define dark mode colors in your theme:"}),"\n"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-typescript",children:'const theme = createTheme({\n  colors: {\n    light: {\n      background: "#FFFFFF",\n      text: "#000000",\n      // ... other light mode colors\n    },\n    dark: {\n      background: "#000000",\n      text: "#FFFFFF",\n      // ... other dark mode colors\n    },\n  },\n  // ... rest of the theme\n});\n'})}),"\n",(0,o.jsxs)(n.ol,{start:"2",children:["\n",(0,o.jsxs)(n.li,{children:["Use the ",(0,o.jsx)(n.code,{children:"useColorScheme"})," hook to detect the user's preference:"]}),"\n"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-typescript",children:'import { useColorScheme } from "react-native";\nimport { useStyles } from "react-native-unistyles";\n\nfunction MyComponent() {\n  const colorScheme = useColorScheme();\n  const { theme } = useStyles();\n\n  const backgroundColor =\n    colorScheme === "dark"\n      ? theme.colors.dark.background\n      : theme.colors.light.background;\n  const textColor =\n    colorScheme === "dark" ? theme.colors.dark.text : theme.colors.light.text;\n\n  return (\n    <View style={{ backgroundColor }}>\n      <Text style={{ color: textColor }}>Hello, World!</Text>\n    </View>\n  );\n}\n'})}),"\n",(0,o.jsx)(n.h2,{id:"customizing-the-theme",children:"Customizing the Theme"}),"\n",(0,o.jsx)(n.p,{children:"To customize the theme for your specific app:"}),"\n",(0,o.jsxs)(n.ol,{children:["\n",(0,o.jsxs)(n.li,{children:["Create a new file, e.g., ",(0,o.jsx)(n.code,{children:"src/styles/customTheme.ts"})]}),"\n",(0,o.jsx)(n.li,{children:"Import the base theme and extend it with your custom values:"}),"\n"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-typescript",children:'import { theme as baseTheme } from "./theme";\n\nexport const customTheme = {\n  ...baseTheme,\n  colors: {\n    ...baseTheme.colors,\n    primary: "#FF0000", // Custom primary color\n  },\n  // Add or override other theme properties as needed\n};\n'})}),"\n",(0,o.jsxs)(n.ol,{start:"3",children:["\n",(0,o.jsx)(n.li,{children:"Use the custom theme in your app's root component:"}),"\n"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-typescript",children:'import { ThemeProvider } from "react-native-unistyles";\nimport { customTheme } from "./styles/customTheme";\n\nfunction App() {\n  return (\n    <ThemeProvider theme={customTheme}>\n      {/* Your app components */}\n    </ThemeProvider>\n  );\n}\n'})})]})}function a(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(d,{...e})}):d(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>i,x:()=>c});var o=t(6540);const s={},r=o.createContext(s);function i(e){const n=o.useContext(r);return o.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:i(e.components),o.createElement(r.Provider,{value:n},e.children)}}}]);